<?php

namespace Creavo\MultiAppBundle\Repository;

use Creavo\MultiAppBundle\Entity\Item;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\AbstractQuery;

/**
 * ItemRevisionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRevisionRepository extends \Doctrine\ORM\EntityRepository {

    public function getByItemAndNumber(Item $item, $number) {
        return $this->findOneBy([
            'item'=>$item,
            'revision'=>$number,
        ]);
    }

    public function getNextRevisionNumber(Item $item) {

        if(!$item->getId()) {
            return 1;
        }

        /** @var QueryBuilder $qb */
        $qb=$this->createQueryBuilder('ir');

        $qb
            ->select('MAX(ir.revision)')
            ->andWhere('ir.item = :item')
            ->setParameter('item',$item)
        ;

        if($result=(int)$qb->getQuery()->getOneOrNullResult(AbstractQuery::HYDRATE_SINGLE_SCALAR)) {
            return $result+1;
        }

        return 1;
    }

    public function deleteOldRevisions(Item $item, $keepRevision=100) {

        $ids=[];

        /** @var QueryBuilder $qb */
        $qb=$this->createQueryBuilder('ir');

        $qb
            ->select('ir.id')
            ->andWhere('ir.item = :item')
            ->setParameter('item',$item)
            ->addOrderBy('ir.revision','desc')
            ->setFirstResult($keepRevision)
            ->setMaxResults(100);

        foreach($qb->getQuery()->getResult() AS $row) {
            $ids[]=$row['id'];
        }

        if(count($ids)>0) {
            /** @var QueryBuilder $qb */
            $qb=$this->_em->createQueryBuilder();

            $qb
                ->delete('CreavoMultiAppBundle:ItemRevision','ir')
                ->andWhere('ir.id IN (:ids)')
                ->setParameter('ids',$ids);

            $qb->getQuery()->execute();
        }
    }

}
