<?php

namespace Creavo\MultiAppBundle\Repository;
use Creavo\MultiAppBundle\Classes\AppField;
use Creavo\MultiAppBundle\Classes\ArraySerializer;
use Creavo\MultiAppBundle\Entity\App;
use Creavo\MultiAppBundle\Entity\Item;
use Creavo\MultiAppBundle\Entity\Workspace;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

/**
 * AppRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppRepository extends \Doctrine\ORM\EntityRepository {

    public function getByWorkspace(Workspace $workspace) {

        /** @var QueryBuilder $qb */
        $qb=$this->createQueryBuilder('a');

        $qb
            ->andWhere('a.workspace = :workspace')
            ->setParameter('workspace',$workspace);

        return $qb;
    }

    public function getItemRow(App $app, Item $item) {

        $fields=$this->getAppFieldsFromApp($app);
        $data=$item->getData();

        /** @var AppField $field */
        foreach($fields AS $field) {
            if(isset($data[$field->getSlug()])) {
                $field->setData($data[$field->getSlug()]);
            }
        }

        return $fields;
    }

    public function getAppFieldsFromApp(App $app) {

        $serializer=new Serializer([new ObjectNormalizer()],[new JsonEncoder()]);
        $fields=json_decode($app->getFields(),true);

        $data=[];
        foreach($fields AS $field) {
            $data[]=$serializer->deserialize(json_encode($field),AppField::class,'json');
        }

        return $data;
    }

    public function setAppFieldsForApp(App $app, array $fields) {

        $serializer=new Serializer([new ObjectNormalizer()],[new JsonEncoder()]);

        $data=[];
        foreach($fields AS $field) {
            $data[]=json_decode($serializer->serialize($field,'json'));
        }

        $app->setFields(json_encode($data,true));
        return $app;
    }

}
